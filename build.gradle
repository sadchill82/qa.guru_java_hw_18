plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.freefair.lombok' version '8.13.1'
}

repositories {
    mavenCentral()
}

def allureVersion = "2.29.1"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                enabled.set(true)
            }
        }
    }
}

dependencies {
    testImplementation (
            "org.junit.jupiter:junit-jupiter:5.12.2",
            "org.slf4j:slf4j-simple:2.0.17",
            'io.rest-assured:rest-assured:5.5.1',
            'io.rest-assured:json-schema-validator:5.5.1',
            'com.fasterxml.jackson.core:jackson-databind:2.18.3',
            "io.qameta.allure:allure-junit5:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.assertj.core.api:assertj-core:3.27.3",
            "org.projectlombok:lombok:1.18.38"
    )
}

def testSuite = System.getProperty('TEST_SUITE', 'all')
def testUsername = System.getProperty('test.username', System.getProperty('TEST_USERNAME', 'TOOLSQA-Test'))
def testPassword = System.getProperty('test.password', System.getProperty('TEST_PASSWORD', 'Test@@123'))

test {
    useJUnitPlatform {
        if (testSuite != 'all') {
            includeTags testSuite
        }
    }

    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

    systemProperty 'demoqa.base.url', 'https://demoqa.com'
    systemProperty 'test.username', testUsername
    systemProperty 'test.password', testPassword
    systemProperty 'allure.results.directory', 'build/allure-results'

    jvmArgs '-Xmx1024m'

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    ignoreFailures = true

    finalizedBy allureReport
}

task cleanAllureResults(type: Delete) {
    description = 'Очистка результатов предыдущих запусков Allure'
    delete 'build/allure-results'
}

task testWithCleanResults {
    description = 'Запуск тестов с очисткой предыдущих результатов Allure'
    dependsOn cleanAllureResults, test
}

task testProfile(type: Test) {
    description = 'Запуск тестов профиля'
    useJUnitPlatform {
        includeTags 'profile'
    }
}

task testDelete(type: Test) {
    description = 'Запуск тестов удаления'
    useJUnitPlatform {
        includeTags 'delete'
    }
}

task testNegative(type: Test) {
    description = 'Запуск негативных тестов'
    useJUnitPlatform {
        includeTags 'negative'
    }
}

task testWorkflow(type: Test) {
    description = 'Запуск комплексных сценариев'
    useJUnitPlatform {
        includeTags 'workflow'
    }
}

task runJenkinsTests(type: Test) {
    description = 'Запуск тестов для Jenkins с поддержкой параметров'

    useJUnitPlatform {
        if (testSuite != 'all') {
            includeTags testSuite
        }
    }

    doFirst {
        println "=== Jenkins Test Execution ==="
        println "TEST_SUITE: $testSuite"
        println "TEST_USERNAME: $testUsername"
        println "TEST_PASSWORD: ${testPassword ? '[MASKED]' : 'NOT_SET'}"
        println "============================="
    }
}

tasks.withType(Test) {
    systemProperty 'demoqa.base.url', 'https://demoqa.com'
    systemProperty 'test.username', testUsername
    systemProperty 'test.password', testPassword
    systemProperty 'allure.results.directory', 'build/allure-results'

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

    jvmArgs '-Xmx1024m'
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    ignoreFailures = true

    finalizedBy allureReport
}

task openAllureReport(type: Exec) {
    description = 'Открытие Allure отчета в браузере'
    dependsOn allureReport

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'start', 'build/reports/allure-report/index.html'
    } else if (System.getProperty('os.name').toLowerCase().contains('mac')) {
        commandLine 'open', 'build/reports/allure-report/index.html'
    } else {
        commandLine 'xdg-open', 'build/reports/allure-report/index.html'
    }
}

task checkJenkinsConfig {
    description = 'Проверка конфигурации для Jenkins'
    doLast {
        println "=== Jenkins Configuration Check ==="
        println "Java version: ${System.getProperty('java.version')}"
        println "Gradle version: ${gradle.gradleVersion}"
        println "Project dir: ${project.projectDir}"
        println "Test username: ${testUsername}"
        println "Test suite: ${testSuite}"
        println "Allure results dir: build/allure-results"
        println "=================================="
    }
}